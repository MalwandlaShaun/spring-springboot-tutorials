Getting Started with Spring Boot
• WHY Spring Boot?
    - You can build web apps & REST API WITHOUT Spring Boot
    - What is the need for Spring Boot? .
 • WHAT are the goals of Spring Boot?
 • HOW does Spring Boot work?
 • COMPARE Spring Boot vs Spring MVC vs Spring


Getting Started with Spring Boot ⁃ Approach  .
1: Understand the world before Spring Boot (10000 Feet)  .
2: Create a Spring Boot Project  .
3: Build a simple REST API using Spring Boot  .
4: Understand the MAGIC of Spring Boot
    ⁃ Spring Initializr
    - Starter Projects
    - Auto Configuration
    - Developer Tools
    ⁃ Actuator
    - ...


What's the Most Important Goal of Spring Boot?
• Help you build PRODUCTION-READY apps QUICKLY
    - Build QUICKLY
        ◦ Spring Initializr
        ◦ Spring Boot Starter Projects
        ◦ Spring Boot Auto Configuration
        ◦ Spring Boot DevTools
    ⁃ Be PRODUCTION-READY
        ◦ Logging
        ◦ Different Configuration for Different Environments
            - Profiles, ConfigurationProperties
        ◦ Monitoring (Spring Boot Actuator)


Exploring Spring Boot Starter Projects
• I need a lot of frameworks to build application features:
    ⁃ Build a REST API: I need Spring, Spring MVC, Tomcat, JSON conversion.
    ⁃ Write Unit Tests: I need Spring Test, JUnit, Mockito, ..
• How can I group them and make it easy to build applications?
    - Starters: Convenient dependency descriptors for diff. features
• Spring Boot provides variety of starter projects:
    - Web Application & REST API ⁃ Spring Boot Starter Web (spring-webmvc,  spring-web,
    spring-boot-starter-tomcat, spring-boot-starter-json)
    ⁃ Unit Tests ⁃ Spring Boot Starter Test
    - Talk to database using JPA- Spring Boot Starter Data JPA
    ⁃ Talk to database using JDBC ⁃ Spring Boot Starter JDBC
    - Secure your Web application or REST APT- Spring Boot Starter Security

Exploring Spring Boot Auto Configuration
• I need lot of configuration to build Spring app:
    - Component Scan, DispatcherServlet, Data Sources, JSON Conversion, ..
• How can I simplify this?
    - Auto Configuration: Automated configuration for your app
        ◦ Decided based on:
            -> Which frameworks are in the Class Path?
            -> What is the existing configuration (Annotations etc)?
• Example: Spring Boot Starter Web
    ⁃ Dispatcher Servlet (DispatcherServletAutoConfiguration)
    - Embedded Servlet Container - Tomcat is the default
    (EmbeddedwebServerFactoryCustomizerAutoConfiguration)
    - Default Error Pages (ErrorMvcAutoConfiguration)
    - Bean<->JSON  (Jackson#ttpMessageConvertersconfiquration)


Build Faster with Spring Boot DevTools
• Increase developer productivity
• Why do you need to restart the server manually for
every code change?
• Remember: For pom.xml dependency changes,
you will need to restart server manually


Managing App. Configuration using Profiles
. Applications have different environments: Dev, QA, Stage, Prod,.
• Different environments need different configuration:
    ⁃ Different Databases
    ⁃ Different Web Services
• How can you provide different configuration for different environments?
    - Profiles: Environment specific configuration


Simplify Deployment with Spring Boot Embedded Servers
• How do you deploy your application?
    - Step 1:Install Java
    - Step 2 : Install Web/Application Server
        ◦ Tomcat/WebSphere/WebLogic etc
    ⁃ Step 3 : Deploy the application WAR (Web ARchive)
        ◦ This is the OLD WAR Approach
        ○ Complex to setup!
• Embedded Server - Simpler alternative
        - Step 1: Install Java
        ⁃ Step 2:Run JAR file
        - Make JAR not WAR (Credit: Josh Long!)
        - Embedded Server Examples:
            ◦ spring-boot-starter-tomcat
            ◦ spring-boot-starter-jetty
            ◦ spring- boot-starter-undertow

Monitor Applications using Spring Boot Actuator
• Monitor and manage your  production
• Provides a number of endpoints:
    - beans -Complete list of Spring beans in your app
    ⁃ health ⁃ Application health information
    ⁃ metrics ⁃ Application metrics
    - mappings ⁃ Details around Request Mappings

Understanding Spring Boot vs Spring MVC vs Spring
. Spring Boot vs Spring MVC vs Spring: What's in it?
    - Spring Framework: Dependency Injection
        ◦ @Component, @Autowired, Component Scan etc..
        ◦ Just Dependency Injection is NOT sufficient (You need other frameworks to build apps)
            -> Spring Modules and Spring Projects: Extend Spring Eco System
                ◦ Provide good integration with other frameworks (Hibernate/JPA, JUnit & Mockito for Unit Testing)
    ⁃ Spring MVC (Spring Module): Simplify building web apps and REST API
        ○ Building web applications with Struts was very complex
        @Controller, @RestController, @RequestMapping("/courses")
    - Spring Boot (Spring Project): Build PRODUCTION-READY apps QUICKLY
        ◦ Starter Projects - Make it easy to build variety of applications
        ◦ Auto configuration - Eliminate configuration to setup Spring, Spring MVC and other frameworks!
        ◦ Enable non functional requirements (NFRs):
            -> Actuator: Enables Advanced Monitoring of applications
            -> Embedded Server: No need for separate application servers!
            -> Logging and Error Handling
            -> Profiles and ConfigurationProperties


Spring Boot - Review
• Goal: 10,000 Feet overview of Spring Boot
    - Help you understand the terminology!
        ◦ Starter Projects
        ◦ Auto Configuration
        ◦ Actuator
        ◦ DevTools
• Advantages: Get started quickly with production ready features!


Getting Started with JPA and Hibernate
• Build a Simple JPA App using Modern Spring Boot Approach
• Get Hands-on with JPA, Hibernate and Spring Boot
    - World before JPA - JDBC, Spring JDBC
    - Why JPA? hy Hibernate? (JPA Vs Hibernate)
    - Why Spring Boot and Spring Boot Data JPA?

Learning JPA and Hibernate - Approach
• 01: Create a Spring Boot Project with H2
 Spring Data JPA
• 02: Create COURSE table
• 03: Use Spring JDBC to play with COURSE table
• 04: Use JPA and Hibernate to play with COURSE table
• 05: Use Spring Data JPA to play with COURSE table